q()
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
L
f
cube <- function(x, n) {
x^3
}
cube(3)
quit()
quit()
qui()
quit()
x <- c(1,1; 1,1)
x <- c(1,1,1,1)
x <- c(1,1 1,1)
matrix(data, nrow, ncol, byrow)
x <- matrix(x,2,2,T)
x
setwd("~/GitHub/ProgrammingAssignment2")
x = rbind(c(1, -1/4), c(-1/4, 1))
## > m = makeCacheMatrix(x)
## > m$get()
x
m
m = makeCacheMatrix(x)
makeCacheMatrix <- function(x = matrix()) {
invr <- NULL
set <- function(y) {
x <<- y
invr <<- NULL
}
get <- function() x
setinverse <- function(inverse) invr <<- inverse
getinverse <- function() invr
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m
x
m = makeCacheMatrix(x)
m
m$get()
m = makeCacheMatrix(x)
m
m$get()
cacheSolve <- function(x, ...) {
invr <- x$getinverse()
if(!is.null(invr)) {
message("getting cached data.")
return(invr)
}
data <- x$get()
invr <- solve(data)
x$setinverse(invr)
invr
}
cacheSolve(m)
cacheSolve(m)
quit()
